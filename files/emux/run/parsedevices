#!/bin/bash
#
# Parses the firmware/devices file
# If firmware-extra/devices is present, it is appended to
# the contents of firmware/devices

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# EMUX by Saumil Shah
# https://emux.exploitlab.net/

source /emux/run/utils

declare -a ids qemus machines cpus dtbs mems kernels qemuopts mtdparts flashfile flashargs drives bootargs nics nets customs descs archs
declare -A qmachine qdrives qbootargs qnics qnet qcustoms

EMUXROOT="/emux"
FIRMWARE_PREFIX="firmware"

DEVICES="${EMUXROOT}/${FIRMWARE_PREFIX}/devices"

if [ ! -f ${DEVICES} ]
then
   fatalerror "${DEVICES} not present. Cannot continue"
fi

QEMUOPTS="${EMUXROOT}/qemuopts"
DEFAULT_NET="tap,ifname=tap0,script=no,downscript=no"

log "[+] Parsing ${QEMUOPTS}"

while IFS=',' read QMACHINE QDRIVE QBOOTCMD QNIC QNET QCUSTOM
do
   if [ "$QMACHINE" != "" ]
   then
      qmachine[$QMACHINE]=$QMACHINE
      qdrives[$QMACHINE]=$QDRIVE
      qbootargs[$QMACHINE]=$QBOOTCMD
      qnics[$QMACHINE]=$QNIC
      if [ "$QNET" == "" ]
      then
         QNET=$DEFAULT_NET
      fi
      qnet[$QMACHINE]=$QNET
      qcustoms[$QMACHINE]=$QCUSTOM

      log "$QMACHINE|${qbootargs[$QMACHINE]}|${qdrives[$QMACHINE]}|${qbootargs[$QMACHINE]}|${qnics[$QMACHINE]}|${qnet[$QMACHINE]}|${qcustoms[$QMACHINE]}#"
   fi
done <<< "$(cat "${QEMUOPTS}" | sed -e 's/#.*//g')"

log "[+] Parsing ${DEVICES}"

count=0
while IFS=',' read ID QEMU MACHINE CPU DTB MEM KERNEL QOPTS DESC
do
   if [ "$ID" != "" ]
   then
      ids[$count]=$ID
      qemus[$count]=$QEMU
      machines[$count]=$MACHINE
      cpus[$count]=$CPU
      dtbs[$count]=$DTB
      mems[$count]=$MEM
      kernels[$count]=$KERNEL
      drives[$count]=${qdrives[$QOPTS]}

      # After moving to Alpine's own QEMU packages, we don't need to include
      # the QEMU version number in /emux/devices
      #archs[$count]=$(echo $QEMU | sed 's/qemu-system-\([a-z]*\)-.*/\1/')
      archs[$count]=$(echo $QEMU | sed 's/qemu-system-\([a-z]*\)/\1/')

      # check if the device has an mtdparts file, in which case
      # we need to set up QEMU options for enabling VEXPRESS' NOR flash memory
      #
      # two files will be designated, to hold 64MB of contents each:
      # /emux/DEVICE/flash0.bin
      # /emux/DEVICE/flash1.bin
      mtdfile="${EMUXROOT}/${ID}/mtdparts"
      if [ -r "${mtdfile}" ]
      then
         mtdparts[$count]="$(cat ${mtdfile} | grep -v '#' | tr -s '\n' ' ')"
         flashfile[$count]="${EMUXROOT}/${ID}/flashmem/flash"
         flashargs[$count]="-drive file=${flashfile[$count]}0.bin,if=pflash -drive file=${flashfile[$count]}1.bin,if=pflash"
         bootargs[$count]="${qbootargs[$QOPTS]} ${mtdparts[$count]} EMUX=$ID"
      else
         bootargs[$count]="${qbootargs[$QOPTS]} EMUX=$ID"
      fi
      nics[$count]=${qnics[$QOPTS]}
      nets[$count]=${qnet[$QOPTS]}
      descs[$count]=$DESC
      customs[$count]=${qcustoms[$QOPTS]}

      log "${ids[$count]}|${archs[$count]}|${qemus[$count]}|${machines[$count]}|${cpus[$count]}|${dtbs[$count]}|${mems[$count]}|${kernels[$count]}|${drives[$count]}|${bootargs[$count]}|${flashargs[$count]}|${nics[$count]}|${nets[$count]}|${customs[$count]}|${descs[$count]}#"

      count=$((count + 1))
   fi
done <<< "$(cat ${EMUXROOT}/${FIRMWARE_PREFIX}*/devices | sed -e 's/#.*//g')"
